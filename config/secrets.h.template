/*
 * secrets.h - Device Configuration Template
 * 
 * IMPORTANT: 
 * 1. Copy this file to secrets.h
 * 2. Fill in your actual network settings
 * 3. NEVER commit secrets.h to git (it's in .gitignore)
 */

#ifndef SECRETS_H
#define SECRETS_H

// ==================== WIFI CONFIGURATION ====================
// Your WiFi network credentials (ONLY sensitive data needed)
#define WIFI_SSID      "YourWiFiNetworkName"
#define WIFI_PASSWORD  "YourWiFiPassword"

// ==================== HOME ASSISTANT/MQTT CONFIG ====================
// Home Assistant IP address (e.g., "192.168.1.100")
#define MQTT_BROKER_HOST    "192.168.1.100"
#define MQTT_BROKER_PORT    1883

// MQTT Authentication: Your Mosquitto allows anonymous access!
#define MQTT_USERNAME       ""  // Empty = anonymous (your setup doesn't need this)
#define MQTT_PASSWORD       ""  // Empty = anonymous (your setup doesn't need this)
#define MQTT_USE_AUTH       0

// Optional: TLS/SSL (your broker supports it, but doesn't require it)
#define MQTT_USE_TLS        0      // Set to 1 if you want encrypted connection
#define MQTT_TLS_PORT       8883   // TLS port (if enabling TLS)

// ==================== DEVICE CONFIGURATION ====================
// Unique device identifier - change this for each device you build
#define DEVICE_ID          "presence_sensor_01"
#define DEVICE_NAME        "Living Room Presence"
#define DEVICE_LOCATION    "Living Room"

// Home Assistant Discovery Topic Prefix (standard)
#define HA_DISCOVERY_PREFIX "homeassistant"

// ==================== HARDWARE CONFIGURATION ====================
// GPIO Pin Assignments (per-target defaults)
// LD2420 24GHz Presence Sensor UART Connection
// Note: You can map UART to almost any GPIO via the IO matrix. Choose pins that
// do not conflict with strapping, USB, JTAG or flash. See README for guidance.
#define USE_LD2411            0   // Set to 1 to build for HLK-LD2411 driver
#if CONFIG_IDF_TARGET_ESP32C6
  // Common C6 devkits label IO16=TX, IO17=RX as UART0; safe for sensor UART.
  #define LD2420_UART_TX_PIN    16  // ESP TX → LD2420 RX (board silk: TX)
  #define LD2420_UART_RX_PIN    17  // ESP RX ← LD2420 TX/OT1 (board silk: RX)
  // Prefer a non-JTAG, non-strapping GPIO for OT2 on C6 (e.g., IO14)
  #define LD2420_OT2_PIN        14  // Optional: LD2420 OT2 auxiliary output
#elif CONFIG_IDF_TARGET_ESP32C3
  // Typical C3 devkits: UART0 defaults on IO21/IO20; we use those pins with UART1.
  #define LD2420_UART_TX_PIN    21  // ESP TX → LD2420 RX
  #define LD2420_UART_RX_PIN    20  // ESP RX ← LD2420 TX/OT1
  #define LD2420_OT2_PIN        4   // Optional: LD2420 OT2 (avoid if using JTAG)
#else
  // Fallback defaults; adjust to your board if using a different target.
  #define LD2420_UART_TX_PIN    21
  #define LD2420_UART_RX_PIN    20
  #define LD2420_OT2_PIN        4
#endif

#define LD2420_UART_NUM         1   // Use UART1 for sensor to avoid console conflicts

// Built-in OLED Display (0.42" 128x64 I2C)
#define OLED_SDA_PIN           5   // I2C SDA (confirmed from pinout)
#define OLED_SCL_PIN           6   // I2C SCL (confirmed from pinout)
#define OLED_I2C_ADDR          0x3C // Standard OLED I2C address
#define OLED_WIDTH             128  // Display width in pixels
#define OLED_HEIGHT            64   // Display height in pixels
#define OLED_OFFSET_X          13   // Special: display starts at (13,14) not (0,0)
#define OLED_OFFSET_Y          14   // Special: display starts at (13,14) not (0,0)

// Built-in Status LED
#define STATUS_LED_PIN         8   // GPIO8 LED (controllable)

// User Interface
#define BOOT_BUTTON_PIN        0   // GPIO0 Boot button (can be used for user input)

// ==================== OPERATIONAL SETTINGS ====================
// LD2420 Sensor Configuration
#define LD2420_BAUD_RATE           115200  // Modern LD2420 firmware uses 115200
#define PRESENCE_TIMEOUT_SECONDS   30      // How long to maintain presence after detection stops
#define SENSOR_UPDATE_INTERVAL_MS  100     // How often to read sensor data
#define USE_LD2420_OT2             false   // Set true to monitor OT2 auxiliary output
// Optional: OT2 polarity (1 = active-high, 0 = active-low). Many boards are active-low.
#define LD2420_OT2_ACTIVE_HIGH     1
// Optional smoothing overrides (if defined, firmware will use these)
// Debounce in ms for OT2 edges (default 80)
// #define LD2420_DEBOUNCE_MS         120
// Hold-on time in ms after activity to keep presence true (default 1000)
// #define LD2420_HOLD_ON_MS          5000

// Optional: some LD2420 firmwares only start UART streaming after a request.
// You can provide an ASCII command and/or a space-separated hex sequence to
// transmit at boot and during UART probing.
// Examples (choose what matches your module/tool):
// #define LD2420_BOOT_TX_ASCII       "UARTRPT=1\r\n"
// #define LD2420_BOOT_TX_HEX         "AA 55 01 00"
// #define LD2420_BOOT_TX_REPEAT      2
// #define LD2420_BOOT_TX_DELAY_MS    30

// OLED Display Settings
#define OLED_REFRESH_RATE_MS       100     // Display update frequency
#define OLED_CONTRAST              255     // Display brightness (0-255)
#define OLED_DISPLAY_TIMEOUT_SEC   0       // 0 = always on, >0 = auto-off timeout

// Status LED Behavior
#define LED_BLINK_NORMAL_MS        2000    // Normal heartbeat blink interval
#define LED_BLINK_ERROR_MS         200     // Error condition rapid blink
#define LED_BLINK_CONNECTING_MS    500     // WiFi/MQTT connecting blink

// MQTT Publishing Intervals
#define MQTT_STATE_PUBLISH_INTERVAL_MS      1000    // Presence state updates
#define MQTT_SENSOR_PUBLISH_INTERVAL_MS     5000    // Distance, signal strength, etc.
#define MQTT_DIAGNOSTIC_PUBLISH_INTERVAL_MS 60000   // WiFi signal, uptime, memory

// WiFi Configuration
#define WIFI_MAXIMUM_RETRY     10
#define WIFI_SCAN_METHOD       WIFI_FAST_SCAN
#define WIFI_SORT_METHOD       WIFI_CONNECT_AP_BY_SIGNAL
#define WIFI_RSSI_THRESHOLD    -127
#define WIFI_AUTH_MODE_THRESHOLD WIFI_AUTH_WPA2_PSK

// ==================== SECURITY SETTINGS ====================
// Network Security
#define ENABLE_OTA_UPDATES     true
#define OTA_REQUIRE_HTTPS      true   // Only secure OTA updates
#define ENABLE_WEB_INTERFACE   true   // For configuration/diagnostics

// TLS Configuration (optional - your broker supports but doesn't require)
// Uncomment if you want to enable TLS encryption:
// #define MQTT_USE_TLS           true
// #define MQTT_CA_CERT_PATH      "/spiffs/ca.crt"

// ==================== DEBUG SETTINGS ====================
// Logging Levels
#define LOG_LEVEL_DEFAULT      ESP_LOG_INFO
#define LOG_LEVEL_WIFI         ESP_LOG_INFO  
#define LOG_LEVEL_MQTT         ESP_LOG_INFO
#define LOG_LEVEL_LD2420       ESP_LOG_DEBUG
#define LOG_LEVEL_OLED         ESP_LOG_INFO

// Development Features
#define ENABLE_SERIAL_MONITOR  true
#define MQTT_DEBUG_MESSAGES    false  // Set true for MQTT debugging

#endif // SECRETS_H
